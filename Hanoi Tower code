class Tower_Of_Hanoi:
    def __init__(self):
        self.essential = MyStack()
        self.input = MyStack()
        self.output = MyStack()

    def sorting(self, data):
        for d in data:
            self.input.push(d)
        while self.input.isEmpty() != True:
            self.essential = self.input.peak()
            self.input.pop()
            while self.output.isEmpty() != True and int(self.output.peak()) <= int(self.essential):
                self.input.push(self.output.peak())
                self.output.pop()
            self.output.push(self.essential)
        self.output.display()

class MyStack:
    def __init__(self):
        self.stack = []

    def isEmpty(self):
        return self.size() == 0
    def pop(self):
        if self.isEmpty():
            return None
        else:
            return self.stack.pop()
    def push(self, val):
        return self.stack.append(val)
    def peak(self):
        if self.isEmpty():
            return None
        else:
            return self.stack[-1]
    def size(self):
        return len(self.stack)
    def display(self):
        print self.stack

def main():
    TH = Tower_Of_Hanoi()

    TH.sorting((1,2,3,4,5,6,7,8,9,10,11,23))

    print ('tower of hanoi sorted')

main()
